// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              Vendor  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Vendor   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Admin {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String
  createdAt DateTime @default(now())
}

model Vendor {
  id              String    @id @default(cuid())
  name            String
  email           String?   @unique
  password        String
  emailVerified   DateTime?
  accountVerified Boolean
  createdAt       DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  products Product[] @relation("vendorProducts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())

  subscriptions    Subscription[]  @relation("userSubscriptions")
  reviews          Review[]        @relation("userReviews")
  likedReviews     Review[]        @relation("likedReviews")
  dislikedReviews  Review[]        @relation("dislikedReviews")
  comments         Comment[]       @relation("userComments")
  likedComments    Comment[]       @relation("likedComment")
  dislikedComments Comment[]       @relation("dislikedComment")
  wishlist         Product[]       @relation("wishlist")
  templates        Template[]      @relation("userTemplates")
  notifications    Notification[]  @relation("notifications")
  activity         VisitActivity[] @relation("userActivity")
}

model Subscription {
  id        String    @id @default(cuid())
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  startedAt DateTime  @default(now())
  deletedAt DateTime?

  userId     String
  productId  String?
  tierId     String
  templateId String? @unique

  user     User      @relation("userSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  product  Product?  @relation("productSubscriptions", fields: [productId], references: [id], onDelete: Cascade)
  template Template? @relation("templateSubscription", fields: [templateId], references: [id], onDelete: Cascade)
  tier     Tier      @relation("tierSubscriptions", fields: [tierId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([tierId])
  @@index([templateId])
}

model Tier {
  id          String   @id @default(cuid())
  period      Int
  price       Float
  description String
  name        String
  points      String[]
  createdAt   DateTime @default(now())

  productId  String?
  templateId String? @unique

  product       Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  template      Template?      @relation("templateTier", fields: [templateId], references: [id])
  subscriptions Subscription[] @relation("tierSubscriptions")

  @@index([productId])
  @@index([templateId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  verified    Boolean
  link        String?
  createdAt   DateTime @default(now())

  tiers         Tier[]
  vendor        Vendor         @relation("vendorProducts", fields: [vendorId], references: [id], onDelete: Cascade)
  subscriptions Subscription[] @relation("productSubscriptions")
  category      Category       @relation("productCategory", fields: [categoryId], references: [id])
  reviews       Review[]       @relation("productReviews")

  vendorId   String
  categoryId String

  // cross reference rows
  wishlistedUsers      User[]          @relation("wishlist")
  productNotifications Notification[]  @relation("notificationsProduct")
  productActivity      VisitActivity[] @relation("productActivity")

  @@index([categoryId])
  @@index([vendorId])
}

model Template {
  id           String        @id @default(cuid())
  name         String
  description  String
  createdAt    DateTime      @default(now())
  link         String?
  user         User          @relation("userTemplates", fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation("templateSubscription")
  tier         Tier?         @relation("templateTier")

  userId String

  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rating    Float
  review    String?

  userId    String
  productId String

  user     User      @relation("userReviews", fields: [userId], references: [id], onDelete: Cascade)
  product  Product   @relation("productReviews", fields: [productId], references: [id], onDelete: Cascade)
  likes    User[]    @relation("likedReviews")
  dislikes User[]    @relation("dislikedReviews")
  comments Comment[] @relation("reviewComments")

  // cross reference rows
  reviewNotifications Notification[] @relation("notificationsReview")

  @@index([productId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  createdAt DateTime @default(now())

  userId   String
  reviewId String

  user     User   @relation("userComments", fields: [userId], references: [id], onDelete: Cascade)
  review   Review @relation("reviewComments", fields: [reviewId], references: [id], onDelete: Cascade)
  likes    User[] @relation("likedComment")
  dislikes User[] @relation("dislikedComment")

  // cross reference rows
  commentNotifications Notification[] @relation("notificationsComment")

  @@index([reviewId])
  @@index([userId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())

  products Product[] @relation("productCategory")

  // cross reference rows
  categoryNotifications Notification[]  @relation("notificationsCategory")
  categoryActivity      VisitActivity[] @relation("categoryActivity")
}

model Notification {
  id         String   @id @default(cuid())
  type       String
  text       String
  preview    String?
  productId  String?
  reviewId   String?
  commentId  String?
  categoryId String?
  createdAt  DateTime @default(now())

  user     User[]    @relation("notifications")
  product  Product?  @relation("notificationsProduct", fields: [productId], references: [id], onDelete: Cascade)
  review   Review?   @relation("notificationsReview", fields: [reviewId], references: [id], onDelete: Cascade)
  comment  Comment?  @relation("notificationsComment", fields: [commentId], references: [id], onDelete: Cascade)
  category Category? @relation("notificationsCategory", fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([reviewId])
  @@index([commentId])
  @@index([categoryId])
}

model PasswordResetRequest {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  createdAt DateTime @default(now())
}

model VisitActivity {
  id String @id @default(cuid())

  user       User        @relation("userActivity", fields: [userId], references: [id], onDelete: Cascade)
  product    Product?    @relation("productActivity", fields: [productId], references: [id], onDelete: Cascade)
  category   Category?   @relation("categoryActivity", fields: [categoryId], references: [id], onDelete: Cascade)
  timestamps Timestamp[] @relation("activity")

  userId     String
  productId  String?
  categoryId String?

  @@index([userId])
  @@index([productId])
  @@index([categoryId])
}

model Timestamp {
  id String @id @default(cuid())

  createdAt DateTime @default(now())

  visitActivityId String

  // cross reference rows
  visitActivity VisitActivity @relation("activity", fields: [visitActivityId], references: [id], onDelete: Cascade)

  @@index([visitActivityId])
}
